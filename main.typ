#import "templates/index.typ": *
#import "templates/utils.typ": *
#import "libs/tablex.typ": *

// Тут указываем только авторов [authors] и название работы [title] 
#show: index.with(authors: ("В.Д. Панков", ), title: [ОТЧЁТ О ПРАКТИКЕ])

// ch -- center heading
#ch("Введение")

Производственная практика проходила на предприятии ООО “ВАЛДАЙ РОБОТЫ”. Основной вид деятельности предприятия: «Производство промышленных роботов и робототехнических устройств»

Структура предприятия представлена на рисунке @org_structure.

#figure(
  image(ip("org_structure.png")),
  caption: "Структура организации"
) <org_structure>


Практика будет проходить в отделе разработки ПО, в подотделе разработки ПО высокого уровня.

Перед отделом стоят цели разработки автономной работы роботизированных устройств, а также разработки связанного с этим ПО, например, программ для операторов устройств.

Отдел не имеет фиксированных требований к конкретному программному обеспечению, что позволяет использовать наиболее подходящие инструменты для каждой задачи. В настоящий момент работа ведется с помощью следующих программ:

\1. Редактор исходного кода Visual Studio Code:

Описание: Популярный редактор с открытым исходным кодом, разработанный Microsoft.
Преимущества:

| Поддержка подсветки синтаксиса для различных языков программирования.

| Множество расширений, добавляющих дополнительные функции, такие как отладка, автодополнение кода и интеграция с системами контроля версий.

| Кроссплатформенность (доступен для Windows, macOS и Linux).
Использование: В отделе используется для написания кода на различных языках программирования, таких как C++, Python, JavaScript и Go.

\2. IDE Keil µVision:

Описание: Интегрированная среда разработки (IDE) для микроконтроллеров семейства ARM Cortex-M.
Преимущества:
| Встроенный компилятор, отладчик и симулятор.

| Поддержка различных отладочных инструментов, таких как J-Link и ULINK.

| Библиотека готовых к использованию программных модулей.

Использование: В отделе используется для разработки программного обеспечения для микроконтроллеров, используемых в различных проектах.

\3. Git:

Описание: Система контроля версий, позволяющая отслеживать изменения в файлах и коде.
Преимущества:

| Позволяет работать над проектами совместно с другими разработчиками.

| Помогает отслеживать историю изменений и откатывать к предыдущим версиям.

| Обеспечивает децентрализованное хранение кода.

Использование: В отделе используется для контроля версий исходного кода, документации и других файлов.
\4. Gitea:

Описание: Локальный Git-сервер, позволяющий хранить и управлять Git-репозиториями.
Преимущества:
| Позволяет работать с Git-репозиториями в локальной сети без доступа к интернету.

| Обеспечивает более высокий уровень безопасности и контроля над кодом.

| Прост в установке и использовании.

Использование: В отделе используется для хранения Git-репозиториев, доступ к которым требуется только сотрудникам отдела.

Задачей на производственную практику является разработка
требований к программным модулям, их интеграция, отладка и тестирование приложения по работе 
с картой в RMS (Robot Management System).

= Описание требование к программным модулям

Для уже разработанной информационной системы будет разработан дополнительный программный 
модуль для настройки и загрузки карты через визуальный интерфейс.

В данном модуле необходимо реализовать:

| Размещение и настройка масштаба карты посредством жестов;

| Настройки цвета проходимой зоны робота;

| Выбор существующей загруженной карты.

При этом должна обеспечиваться мультиплатформенность приложения и удобный визуальный и понятный интерфейс.

Данный модуль должен успешно работать с разработанным помощником для загрузки карты в 
map_server ROS2. 

map_helper -- это приложение, представляющее собой REST-API для загрузки карты в map_server ROS2 посредством HTTP-запросов, что позволяет загружать карты извне.

map_server ROS2 -- это приложение, которое помогает роботам, понимать своё положение пространстве и пространство в целом (куда они могут двигаться). 

= Интеграция программных модулей

== Построение UML-диаграммы компонентов ПП

На рисунке @components представлена UML-диаграмма компонентов информационной системы. На диаграмме жёлтым закрашены модули, которые будут разработаны в ходе выполнения задания практики.

#rotate(-90deg, reflow: true)[
#figure(
  image(ip("components2.png")),
  caption: "Диаграмма компонентов"
) <components>
]


== Технологии, используемые для интеграции 
Для создания и интеграции разработанных модулей были использованы следующие инструменты.

ROS2 (Robot Operating System 2) - это следующее поколение гибкой и расширяемой платформы для разработки программного обеспечения роботов. Он предоставляет набор инструментов, библиотек и конвенций для управления роботами, включая коммуникацию между различными компонентами робота, управление устройствами, обработку данных сенсоров, планирование движения и многое другое.

Плюсы ROS2:

| Мультиплатформенность: ROS2 поддерживает различные операционные системы, такие как Linux, Windows и macOS, что позволяет разработчикам использовать их предпочитаемые операционные системы для разработки робототехнических приложений.

| Повышенная надежность: ROS2 предлагает улучшенную систему управления памятью, механизмы обработки ошибок и более надежные способы коммуникации между узлами, что способствует повышению стабильности и надежности робототехнических систем.

| Поддержка реального времени: В ROS2 внедрены механизмы, позволяющие управлять робототехническими системами в реальном времени, что делает его более подходящим для широкого спектра приложений, включая критичные по времени задачи.

| Улучшенная безопасность: ROS2 включает в себя механизмы аутентификации, авторизации и шифрования, что повышает уровень безопасности системы, особенно в контексте применения роботов в чувствительных областях, таких как медицина или автономные автомобили.

| Масштабируемость и расширяемость: ROS2 предлагает гибкую архитектуру, которая позволяет разработчикам создавать модульные системы, легко масштабируемые для различных типов роботов и задач.

| Активное сообщество: ROS2 поддерживается широким сообществом разработчиков и исследователей, что обеспечивает доступ к богатому набору инструментов, библиотек и документации, а также возможность сотрудничать и обмениваться знаниями с другими участниками сообщества. @ros2

ROSbridge - это программное обеспечение, которое обеспечивает коммуникацию между ROS (Robot Operating System) и другими системами и платформами через веб-интерфейс. Он предоставляет мост между ROS и веб-технологиями, позволяя взаимодействовать с робототехническими приложениями ROS через веб-интерфейс, включая веб-браузеры и приложения на различных платформах.

Плюсы ROSbridge:

| Универсальность: ROSbridge обеспечивает универсальное взаимодействие с системой ROS, позволяя использовать различные платформы и технологии для взаимодействия с робототехническими приложениями.

| Простота интеграции с веб-технологиями: ROSbridge упрощает интеграцию ROS с веб-технологиями, такими как HTML, JavaScript и WebSocket, что делает возможным управление и мониторинг роботов через интернет и веб-браузеры.

| Расширяемость: ROSbridge может быть расширен и адаптирован для поддержки различных протоколов и форматов данных, что делает его гибким инструментом для взаимодействия с различными системами и платформами.

| Поддержка множества приложений: ROSbridge позволяет создавать различные приложения, включая удаленное управление роботами, визуализацию данных, мониторинг и отладку, что делает его полезным инструментом для разработчиков и исследователей в области робототехники. @rosbridge

WebSockets - это протокол веб-коммуникации, который обеспечивает постоянное соединение между клиентом и сервером веб-приложения. Он позволяет двум сторонам взаимодействовать между собой, отправляя данные в реальном времени без необходимости постоянного обновления страницы.

Плюсы WebSockets:

| Двустороннее взаимодействие: WebSockets поддерживает двустороннюю связь между клиентом и сервером, что позволяет как клиенту, так и серверу отправлять и получать данные в режиме реального времени.

| Малая нагрузка на сеть: WebSockets использует одно постоянное соединение, что уменьшает нагрузку на сеть и снижает задержку в передаче данных по сравнению с традиционными HTTP-запросами.

| Низкая задержка: Поскольку соединение постоянно открыто, WebSockets обеспечивает низкую задержку и быстрое обновление данных между клиентом и сервером, что делает его идеальным для приложений, требующих мгновенной обратной связи.


Kotlin - это статически типизированный язык программирования, разработанный компанией JetBrains. Он предназначен для создания приложений как для JVM (Java Virtual Machine), так и для других платформ, включая Android, JavaScript, Native и другие.

Плюсы Kotlin:

| Безопасность типов: Kotlin предоставляет статическую типизацию, что помогает предотвратить ошибки типов во время компиляции. Это делает код более безопасным и надежным.

| Удобство синтаксиса: Синтаксис Kotlin чистый, лаконичный и более выразительный по сравнению с Java. Он уменьшает количество кода и делает его более читабельным.

| Null-безопасность: Kotlin имеет встроенную поддержку null-безопасности, что помогает предотвращать NullPointerException, что является распространенной проблемой в Java.

| Расширения функциональности: Kotlin предлагает множество улучшенных функций по сравнению с Java, таких как лямбда-выражения, расширения функций, инлайн-функции и многое другое, что способствует более эффективной разработке. @kotlin

Kotlin Multiplatform - это технология в языке программирования Kotlin, которая позволяет разработчикам создавать общий код, который может быть использован на различных платформах, таких как JVM, Android, iOS, JavaScript и другие. Суть Kotlin Multiplatform заключается в возможности разработки приложений с общим кодом, который можно использовать на различных целевых платформах, минимизируя дублирование кода и упрощая его поддержку. 

Плюсы Kotlin Multiplatform:

| Общий код: Kotlin Multiplatform позволяет разработчикам писать общий код для различных платформ, таких как JVM, Android, iOS и JavaScript, что сокращает время разработки и минимизирует дублирование кода.

| Улучшенная поддержка для множества платформ: Kotlin Multiplatform поддерживает широкий спектр платформ, включая мобильные устройства (Android и iOS), веб (JavaScript), серверные приложения (JVM) и другие, что делает его универсальным инструментом разработки.

| Интеграция с существующим кодом: Kotlin Multiplatform позволяет интегрировать общий код с существующими проектами на различных платформах, включая проекты на Java, Swift, Objective-C и JavaScript.


| Удобство использования средств разработки: Kotlin Multiplatform интегрируется с различными средствами разработки, такими как IntelliJ IDEA, Android Studio и Xcode, что обеспечивает удобство использования и отладки общего кода на различных платформах.

| Повышенная переносимость кода: Благодаря Kotlin Multiplatform разработчики могут создавать приложения с общим кодом, который можно легко переносить между различными платформами, что повышает гибкость и масштабируемость проектов. @kmp

IntelliJ IDEA - это интегрированная среда разработки (IDE) для языков программирования Java, Kotlin, Groovy, Scala, и других. Разработана компанией JetBrains и предоставляет разработчикам широкий набор инструментов для эффективной работы над проектами.

Плюсы IntelliJ IDEA:

| Мощный инструментарий: IntelliJ IDEA предоставляет широкий спектр инструментов для разработки, включая редактор кода с подсветкой синтаксиса, автодополнение, рефакторинг, отладчик, систему контроля версий и многое другое.

| Поддержка множества языков: Помимо Java, IntelliJ IDEA поддерживает также Kotlin, Groovy, Scala, JavaScript, TypeScript и другие языки программирования, что делает его универсальным инструментом для разработки различных типов приложений.

| Интеграция с фреймворками и технологиями: IntelliJ IDEA обладает интеграцией с популярными фреймворками и технологиями, такими как Spring, Hibernate, Android SDK, Maven, Gradle и другими, что упрощает создание и развертывание приложений.

| Удобство использования: Интерфейс IntelliJ IDEA интуитивно понятен и удобен в использовании, что позволяет разработчикам сосредотачиваться на написании кода, а не на поиске и настройке инструментов.

| Богатый набор плагинов: IntelliJ IDEA поддерживает богатый экосистему плагинов, которые позволяют расширить его функциональность и адаптировать под конкретные потребности разработчика. @idea

Jetpack Compose - это современная библиотека для разработки пользовательских интерфейсов (UI) на языке Kotlin для платформы Android. Она предоставляет декларативный подход к созданию пользовательских интерфейсов, что позволяет разработчикам описывать внешний вид приложения как набор компонентов и их свойств, а не через императивные последовательности операций.

Плюсы Jetpack Compose:

| Декларативный подход: Jetpack Compose использует декларативный подход к созданию пользовательских интерфейсов, что делает код более читабельным, понятным и легким в поддержке.

| Упрощение разработки: Благодаря декларативному подходу, Jetpack Compose значительно упрощает разработку пользовательских интерфейсов, сокращая количество кода, необходимого для описания интерфейса.

| Интерактивность и анимация: Jetpack Compose обеспечивает простое добавление интерактивности и анимации в пользовательские интерфейсы, что делает приложения более привлекательными для пользователей.

| Совместимость с существующим кодом: Jetpack Compose может быть легко интегрирован с существующим кодом на платформе Android, что позволяет постепенно внедрять его в существующие проекты.

| Поддержка разработки для различных устройств: Jetpack Compose предоставляет инструменты для создания адаптивных пользовательских интерфейсов, которые могут эффективно работать на различных устройствах и экранах.

| Совместимость с Android-стандартами: Jetpack Compose интегрируется с существующими инструментами и стандартами разработки Android, такими как Android Studio и AndroidX, что обеспечивает удобство использования и поддержки.

| Активная поддержка и развитие: Jetpack Compose активно поддерживается и развивается командой Google, что обеспечивает доступность к обновлениям, исправлениям ошибок и новым возможностям для разработчиков. @jetpack-compose



#ch("Заключение")




#ch("Список использованных источников")

#bibliography("bibliography.yml", title: none, full: true, style: "gost-r-705-2008-numeric")

#chn([ПРИЛОЖЕНИЕ А Листинг разработанной библиотеки])

Parser.kt

#show raw: set text(hyphenate: false, size: 10pt)
#show raw: set par(justify: false, leading: 1em, first-line-indent: 0em)
// #raw(read("./src/lib/Parser.kt"), lang: "kotlin")
\

//#allFiles(json("src/app.json").at(0)) 
