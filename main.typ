#import "templates/index.typ": *
#import "templates/utils.typ": *
#import "libs/tablex.typ": *

// Тут указываем только авторов [authors] и название работы [title] 
#show: index.with(authors: ("В.Д. Панков", ), title: [ОТЧЁТ О ПРАКТИКЕ])

// ch -- center heading
#ch("Введение")

Производственная практика проходила на предприятии ООО “ВАЛДАЙ РОБОТЫ”. Основной вид деятельности предприятия: «Производство промышленных роботов и робототехнических устройств»

Структура предприятия представлена на рисунке @org_structure.

#figure(
  image(ip("org_structure.png")),
  caption: "Структура организации"
) <org_structure>


Практика будет проходить в отделе разработки ПО, в подотделе разработки ПО высокого уровня.

Перед отделом стоят цели разработки автономной работы роботизированных устройств, а также разработки связанного с этим ПО, например, программ для операторов устройств.

Отдел не имеет фиксированных требований к конкретному программному обеспечению, что позволяет использовать наиболее подходящие инструменты для каждой задачи. В настоящий момент работа ведется с помощью следующих программ:

\1. Редактор исходного кода Visual Studio Code:

Описание: Популярный редактор с открытым исходным кодом, разработанный Microsoft.
Преимущества:

| Поддержка подсветки синтаксиса для различных языков программирования.

| Множество расширений, добавляющих дополнительные функции, такие как отладка, автодополнение кода и интеграция с системами контроля версий.

| Кроссплатформенность (доступен для Windows, macOS и Linux).
Использование: В отделе используется для написания кода на различных языках программирования, таких как C++, Python, JavaScript и Go.

\2. IDE Keil µVision:

Описание: Интегрированная среда разработки (IDE) для микроконтроллеров семейства ARM Cortex-M.
Преимущества:
| Встроенный компилятор, отладчик и симулятор.

| Поддержка различных отладочных инструментов, таких как J-Link и ULINK.

| Библиотека готовых к использованию программных модулей.

Использование: В отделе используется для разработки программного обеспечения для микроконтроллеров, используемых в различных проектах.

\3. Git:

Описание: Система контроля версий, позволяющая отслеживать изменения в файлах и коде.
Преимущества:

| Позволяет работать над проектами совместно с другими разработчиками.

| Помогает отслеживать историю изменений и откатывать к предыдущим версиям.

| Обеспечивает децентрализованное хранение кода.

Использование: В отделе используется для контроля версий исходного кода, документации и других файлов.
\4. Gitea:

Описание: Локальный Git-сервер, позволяющий хранить и управлять Git-репозиториями.
Преимущества:
| Позволяет работать с Git-репозиториями в локальной сети без доступа к интернету.

| Обеспечивает более высокий уровень безопасности и контроля над кодом.

| Прост в установке и использовании.

Использование: В отделе используется для хранения Git-репозиториев, доступ к которым требуется только сотрудникам отдела.

Задачей на производственную практику является разработка
требований к программным модулям, их интеграция, отладка и тестирование приложения по работе 
с картой в RMS (Robot Management System).

= Описание требование к программным модулям

Для уже разработанной информационной системы будет разработан дополнительный программный 
модуль для настройки и загрузки карты через визуальный интерфейс.

В данном модуле необходимо реализовать:

| Размещение и настройка масштаба карты посредством жестов;

| Настройки цвета проходимой зоны робота;

| Выбор существующей загруженной карты.

При этом должна обеспечиваться мультиплатформенность приложения и удобный визуальный и понятный интерфейс.

Данный модуль должен успешно работать с разработанным помощником для загрузки карты в 
map_server ROS2. 

map_helper -- это приложение, представляющее собой REST-API для загрузки карты в map_server ROS2 посредством HTTP-запросов, что позволяет загружать карты извне.

map_server ROS2 -- это приложение, которое помогает роботам, понимать своё положение пространстве и пространство в целом (куда они могут двигаться). 

= Интеграция программных модулей

== Построение UML-диаграммы компонентов ПП

На рисунке представлена UML-диаграмма компонентов информационной системы.

== Технологии, используемые для интеграции 

#ch("Заключение")




#ch("Список использованных источников")

#bibliography("bibliography.yml", title: none, full: true, style: "gost-r-705-2008-numeric")

#chn([ПРИЛОЖЕНИЕ А Листинг разработанной библиотеки])

Parser.kt

#show raw: set text(hyphenate: false, size: 10pt)
#show raw: set par(justify: false, leading: 1em, first-line-indent: 0em)
#raw(read("./src/lib/Parser.kt"), lang: "kotlin")
\

//#allFiles(json("src/app.json").at(0)) 
